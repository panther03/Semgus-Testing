#lang rosette/safe
(current-bitwidth #f)
(require
  rosette/lib/match
  rosette/lib/destruct
  rosette/lib/angelic
  rosette/lib/synthax)
; Define node structures
; Start nonterminal
(struct assn_x (iexp) #:transparent)
(struct assn_y (iexp) #:transparent)
(struct ite_st (cond stmt1 stmt2) #:transparent)
(struct while_st (cond stmt) #:transparent)
(struct semi_st (stmt1 stmt2) #:transparent)
; E nonterminal
(struct plus_st (iexp1 iexp2) #:transparent)
(struct sub_st (iexp1 iexp2) #:transparent)
(struct varx_st () #:transparent)
(struct vary_st () #:transparent)
(struct const1_st () #:transparent)
(struct const0_st () #:transparent)
; B nonterminal
(struct true_st () #:transparent)
(struct false_st () #:transparent)
(struct not_st (bexp) #:transparent)
(struct and_st (bexp1 bexp2) #:transparent)
(struct lt_st (iexp1 iexp2) #:transparent)
(struct gt_st (iexp1 iexp2) #:transparent)

(define (Start.Semantics p x y c)
  (reverse (rest (reverse (Start.Sem p x y c)))))

; Output type rx, ry, rc (int, int)
(define (Start.Sem p x y c)
  (assert (>= c 0))
  (destruct p
    [(assn_x iexp) (list (E.Sem iexp x y) y (- c 1))]
    [(assn_y iexp) (list x (E.Sem iexp x y) (- c 1))]
    [(ite_st cond stmt1 stmt2)
               (if (B.Sem cond x y)
                    (Start.Sem stmt1 x y (- c 1))
                    (Start.Sem stmt2 x y (- c 1))
               )
    ]
    [(while_st cond stmt)   (if (B.Sem cond x y)
                                (let ([stmt_sem (Start.Sem stmt x y (- c 1))])
                                    (if (null? stmt_sem)
                                        null
                                        (Start.Sem p (first stmt_sem) (second stmt_sem) (third stmt_sem))
                                    )
                                )
                                (list x y c))]
    [(semi_st stmt1 stmt2) (let ([stmt1_sem (Start.Sem stmt1 x y (- c 1))]) (if (null? stmt1_sem) null (Start.Sem stmt2 (first stmt1_sem) (second stmt1_sem) (- (third stmt1_sem) 1))))]
    ))


; output type:  (int)
(define (E.Sem p xe ye)
  (destruct p
    [(plus_st iexp1 iexp2) (+ (E.Sem iexp1 xe ye) (E.Sem iexp2 xe ye))]
    [(sub_st iexp1 iexp2) (- (E.Sem iexp1 xe ye) (E.Sem iexp2 xe ye))]
    [(vary_st) ye]
    [(varx_st) xe]
    [(const1_st) 1]
    [(const0_st) 0]
    ))
(define (B.Sem b xb yb)
  (destruct b
    [(lt_st iexp1 iexp2) (< (E.Sem iexp1 xb yb) (E.Sem iexp2 xb yb))]
    [(gt_st iexp1 iexp2) (> (E.Sem iexp1 xb yb) (E.Sem iexp2 xb yb))]
    [(true_st) #t]
    [(false_st) #f]
    [(not_st bexp) (! (B.Sem bexp xb yb))]
    [(and_st bexp1 bexp2) (&& (B.Sem bexp1 xb yb) (B.Sem bexp2 xb yb))]
    ))

; we assume depth > 0, there are no terminals for this LHS
; replace with define-grammar
; have to bound depth, but is that applicable here?
(current-grammar-depth 4)
(define-grammar (gram)
  [Start
   (choose
    (while_st (B) (Start)) (assn_x)
    )]
  [E
   (choose
           (varx_st)
           (vary_st)
           (const1_st)
           ;(const0_st)
           (plus_st (E) (E))
           ;(sub_st (E) (E))
           )
           ]
  [B
   (choose ;(true_st)
           ;(false_st)
           (lt_st (E) (E))
           ;(gt_st (E) (E))
           ;(and_st (B) (B))
           ;(not_st (B))
           )
   ]
  )
;(Start.Sem (while_st (lt_st (varx_st) (vary_st)) (assn_x (plus_st (varx_st) (const1_st)))) 1 3 1)
;(Start.Sem (while_st
 ;   (choose (lt_st (varx_st) (plus_st (const1_st) (const1_st))))
;    (assn_x (vary_st)))) 1 3 1)
; Define function to generate
(define (sol)
  (gram #:depth 3))
; Try to generate while x<y; x = x+1; y = y-1;
(define sol_start
  (synthesize
   #:forall (list)
   #:guarantee  (assert
                  (equal? (Start.Semantics (sol) 1 3 99) (list 3 3))
                 )))
(print-forms sol_start)