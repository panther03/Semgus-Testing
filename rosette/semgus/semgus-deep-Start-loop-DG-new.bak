#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 926 0 29 3 18 #"#lang rosette/safe"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 16 #"current-bitwidth"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 17 #"rosette/lib/match"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 20 #"rosette/lib/destruct"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 19 #"rosette/lib/angelic"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 19 #"rosette/lib/synthax"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 24 #"; Define node structures"
0 0 25 29 1 #"\n"
0 0 17 3 19 #"; Start nonterminal"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"assn_x"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iexp"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"assn_y"
0 0 25 3 2 #" ("
0 0 14 3 4 #"iexp"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"ite_st"
0 0 25 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"while_st"
0 0 25 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"semi_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; E nonterminal"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"plus_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"sub_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"varx_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"vary_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"const1_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 9 #"const0_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 15 #"; B nonterminal"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 7 #"true_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"false_st"
0 0 25 3 4 #" () "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"not_st"
0 0 25 3 2 #" ("
0 0 14 3 4 #"bexp"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 6 #"and_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"bexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"bexp2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"lt_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"gt_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"Start.Semantics"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 3 #"thr"
0 0 25 3 2 #" ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 5 #")]) ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"thr"
0 0 25 3 3 #") ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 3 #"thr"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #"; Output type rx, ry, rc (int, int)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 25 3 2 #" ("
0 0 14 3 2 #">="
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"destruct"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"assn_x"
0 0 25 3 1 #" "
0 0 14 3 4 #"iexp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 4 #"iexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #") "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"assn_y"
0 0 25 3 1 #" "
0 0 14 3 4 #"iexp"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 4 #"iexp"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"ite_st"
0 0 25 3 1 #" "
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               )"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"while_st"
0 0 25 3 1 #" "
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 5 #")   ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 8 #"stmt_sem"
0 0 25 3 2 #" ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 37 #"                                    ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 8 #"stmt_sem"
0 0 25 3 3 #") ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 8 #"stmt_sem"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 8 #"stmt_sem"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"semi_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 9 #"stmt1_sem"
0 0 25 3 2 #" ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt1"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 7 #"))])  ("
0 0 14 3 9 #"Start.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"stmt2"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 9 #"stmt1_sem"
0 0 25 3 3 #") ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 9 #"stmt1_sem"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 9 #"stmt1_sem"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; output type:  (int)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 3 1 #" "
0 0 14 3 2 #"xe"
0 0 25 3 1 #" "
0 0 14 3 2 #"ye"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"destruct"
0 0 25 3 1 #" "
0 0 14 3 1 #"p"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"plus_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 3 #") ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xe"
0 0 25 3 1 #" "
0 0 14 3 2 #"ye"
0 0 25 3 3 #") ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xe"
0 0 25 3 1 #" "
0 0 14 3 2 #"ye"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"sub_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xe"
0 0 25 3 1 #" "
0 0 14 3 2 #"ye"
0 0 25 3 3 #") ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xe"
0 0 25 3 1 #" "
0 0 14 3 2 #"ye"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"vary_st"
0 0 25 3 2 #") "
0 0 14 3 2 #"ye"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"varx_st"
0 0 25 3 2 #") "
0 0 14 3 2 #"xe"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"const1_st"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 9 #"const0_st"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"destruct"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 5 #"lt_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #") ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 5 #"gt_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 3 #") ("
0 0 14 3 1 #">"
0 0 25 3 2 #" ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #") ("
0 0 14 3 5 #"E.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"iexp2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"true_st"
0 0 25 3 2 #") "
0 0 22 3 2 #"#t"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 8 #"false_st"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"not_st"
0 0 25 3 1 #" "
0 0 14 3 4 #"bexp"
0 0 25 3 3 #") ("
0 0 14 3 1 #"!"
0 0 25 3 2 #" ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 14 3 4 #"bexp"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 6 #"and_st"
0 0 25 3 1 #" "
0 0 14 3 5 #"bexp1"
0 0 25 3 1 #" "
0 0 14 3 5 #"bexp2"
0 0 25 3 3 #") ("
0 0 14 3 2 #"&&"
0 0 25 3 2 #" ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"bexp1"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #") ("
0 0 14 3 5 #"B.Sem"
0 0 25 3 1 #" "
0 0 14 3 5 #"bexp2"
0 0 25 3 1 #" "
0 0 14 3 2 #"xb"
0 0 25 3 1 #" "
0 0 14 3 2 #"yb"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 21 #"current-grammar-depth"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 14 #"define-grammar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"gram"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"Start"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"while_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"B"
0 0 25 3 3 #") ("
0 0 14 3 5 #"Start"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"assn_x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"assn_y"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"ite_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"B"
0 0 25 3 3 #") ("
0 0 14 3 5 #"Start"
0 0 25 3 3 #") ("
0 0 14 3 5 #"Start"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 7 #"semi_st"
0 0 25 3 2 #" ("
0 0 14 3 5 #"Start"
0 0 25 3 3 #") ("
0 0 14 3 5 #"Start"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    )]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 1 #"E"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"varx_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"vary_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 9 #"const1_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 12 #";(const0_st)"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"plus_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 3 #") ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";(sub_st (E) (E))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           )"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 1 #"B"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 3 1 #" "
0 0 17 3 10 #";(true_st)"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 11 #";(false_st)"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 5 #"lt_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 3 #") ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 16 #";(gt_st (E) (E))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";(and_st (B) (B))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 13 #";(not_st (B))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           )"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; Define function to generate"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"sol"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"gram"
0 0 25 3 1 #" "
0 0 24 3 7 #"#:depth"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; Try to generate while x<y; x = x+1; y = y-1;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"sol_start"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"synthesize"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 24 3 8 #"#:forall"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 24 3 11 #"#:guarantee"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 15 #"Start.Semantics"
0 0 25 3 2 #" ("
0 0 14 3 3 #"sol"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"7"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                 )))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 11 #"print-forms"
0 0 25 3 1 #" "
0 0 14 3 9 #"sol_start"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9        1093 22           0 0           0 181 0 17 3 58
#"; we assume depth > 0, there are no terminals for this LHS"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; replace with define-grammar"
0 0 25 29 1 #"\n"
0 0 17 3 51 #"; have to bound depth, but is that applicable here?"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 21 #"current-grammar-depth"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 14 #"define-grammar"
0 0 25 3 2 #" ("
0 0 14 3 4 #"gram"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"Start"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 8 #"while_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"B"
0 0 25 3 3 #") ("
0 0 14 3 5 #"Start"
0 0 25 3 4 #")) ("
0 0 14 3 6 #"assn_x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    )]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 1 #"E"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"varx_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"vary_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 9 #"const1_st"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 12 #";(const0_st)"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 7 #"plus_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 3 #") ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";(sub_st (E) (E))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           )"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 1 #"B"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"choose"
0 0 25 3 1 #" "
0 0 17 3 10 #";(true_st)"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 11 #";(false_st)"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 5 #"lt_st"
0 0 25 3 2 #" ("
0 0 14 3 1 #"E"
0 0 25 3 3 #") ("
0 0 14 3 1 #"E"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 16 #";(gt_st (E) (E))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 17 #";(and_st (B) (B))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"           "
0 0 17 3 13 #";(not_st (B))"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           )"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 17 3 98
(5
 #";(Start.Sem (while_st (lt_st (varx_st) (vary_st)) (assn_x (plus_st (v"
 #"arx_st) (const1_st)))) 1 3 1)"
) 0 0 25 29 1 #"\n"
0 0 17 3 21 #";(Start.Sem (while_st"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 17 3 64
#";   (choose (lt_st (varx_st) (plus_st (const1_st) (const1_st))))"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";    (assn_x (vary_st)))) 1 3 1)"
0 0 25 29 1 #"\n"
0 0 17 3 29 #"; Define function to generate"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"sol"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"gram"
0 0 25 3 1 #" "
0 0 24 3 7 #"#:depth"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 46 #"; Try to generate while x<y; x = x+1; y = y-1;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"sol_start"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"synthesize"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 24 3 8 #"#:forall"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 24 3 11 #"#:guarantee"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"assert"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 15 #"Start.Semantics"
0 0 25 3 2 #" ("
0 0 14 3 3 #"sol"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #") ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                 )))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 11 #"print-forms"
0 0 25 3 1 #" "
0 0 14 3 9 #"sol_start"
0 0 25 3 1 #")"
0           0 0           0
